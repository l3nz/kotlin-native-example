// ./gradlew -Dproduction=1 ....


plugins {
  id 'org.jetbrains.kotlin.multiplatform' version '1.3.50'
  id 'application'
  //id 'com.github.johnrengelman.shadow' version '5.0.0'
  //id "com.moowork.node" version "1.3.1"
  id 'org.jetbrains.dokka' version '0.9.18'
  // https://github.com/gmazzo/gradle-buildconfig-plugin  
  //id 'com.github.gmazzo.buildconfig' version '1.5.0'
}


def env = System.getenv()
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def getBuildNo = { ->
  return (env["BUILD_NUMBER"] == null) ? "" : ( " b" +env["BUILD_NUMBER"])
}
def getProduction = {
  return (System.getProperty("production") == "1")
}
def getDate = { ->
    def date = new Date()
    def formattedDate = date.format('yyyy.MM.dd-HH:mm')
    return formattedDate
}




group = 'l3nz'
//name = 'marmot'
version = '0.0.1'

repositories {
  mavenCentral()
  jcenter()
  maven { url 'https://jitpack.io' }
  maven { url 'http://oss.sonatype.org/content/repositories/google-snapshots' }
}

ext {
  kotlinVersion = '1.3.50'
  junitJupiterEngineVersion = '5.4.0'
    ktor_version = "1.2.4"
}

application {
  mainClassName = 'io.vertx.core.Launcher'
}

/*
dependencies {

implementation("io.ktor:ktor-client-core:$ktor_version")
//implementation("io.ktor:ktor-client-curl:$ktor_version")

  //implementation 'loway:loway-tpf:301p'

  //implementation "org.apache.logging.log4j:log4j-api-kotlin:1.0.0"
  //testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
  //testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
  testImplementation("org.junit.jupiter:junit-jupiter:5.5.1")
}
*/

test {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}



dokka {
    outputFormat = 'html' 
    outputDirectory = "$buildDir/javadoc"
}


kotlin {
    jvm("jvm") {

    }

    //js()  // JS target named 'js'
    macosX64("mac") {
      binaries {
            executable {
                // Change to specify fully qualified name of your application's entry point:
                entryPoint = 'knativedemo.main'
                // Specify command-line arguments, if necessary:
                runTask?.args('')
            }
        }
    }
    
    linuxX64("linux") {
      binaries {
            executable {
                // Change to specify fully qualified name of your application's entry point:
                entryPoint = 'knativedemo.main'
                // Specify command-line arguments, if necessary:
                runTask?.args('')
            }
        }
    }

    //sourceSets { /* ... */ }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-client-core:$ktor_version"

            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }


        macMain {
            dependencies {
                implementation "io.ktor:ktor-client-core-macosx64:$ktor_version"
                implementation "io.ktor:ktor-client-curl:$ktor_version"
            }
        }

        linuxMain {
            dependencies {
                implementation "io.ktor:ktor-client-core-linuxx64:$ktor_version"
                implementation "io.ktor:ktor-client-curl:$ktor_version"
            }
        }


    }

}
